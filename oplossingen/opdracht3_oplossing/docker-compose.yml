version: "3"
services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic
  index_creator:
    build: ./index_creator
    depends_on:
      - es01
    volumes:
      - index_creator:/tracker
    command: sh -c "dockerize -wait tcp://es01:9200 -timeout 300s -wait-retry-interval 30s sh startup_script.sh"
    networks:
      - elastic
  scraper:
    build: ./scraper
    volumes:
      - scraper:/tracker
    depends_on:
      - es01
    command: sh -c "dockerize -wait tcp://es01:9200 -timeout 300s -wait-retry-interval 30s sh startup_script.sh"
    networks:
      - elastic

  python_app:
    build: ./frontend
    depends_on:
      - es01
    networks:
      - elastic
      - frontend
  nginx:
    image: nginx:latest
    ports:
      - 80:80
    depends_on:
      - python_app
    networks:
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

networks:
  elastic:
  frontend:

volumes:
  data01:
  data02:
  data03:
  scraper:
  index_creator:
